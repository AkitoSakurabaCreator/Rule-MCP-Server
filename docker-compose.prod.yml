# 本番環境用 Docker Compose
# 使用方法: docker-compose -f docker-compose.prod.yml up -d

services:
  postgres:
    image: postgres:15-alpine
    container_name: rule-mcp-postgres-prod
    environment:
      POSTGRES_DB: ${DB_NAME:-rule_mcp_db}
      POSTGRES_USER: ${DB_USER:-rule_mcp_user}
      POSTGRES_PASSWORD: ${DB_PASSWORD:-rule_mcp_password}
    ports:
      - "15432:5432"  # 標準5432を避けて15432を使用
    volumes:
      - postgres_data_prod:/var/lib/postgresql/data
      - ./init.sql:/docker-entrypoint-initdb.d/init.sql
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER:-rule_mcp_user} -d ${DB_NAME:-rule_mcp_db}"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped
    networks:
      - rule-mcp-network-prod

  rule-mcp-server:
    build: 
      context: .
      dockerfile: Dockerfile.prod
    container_name: rule-mcp-server-prod
    ports:
      - "18080:8080"  # 標準8080を避けて18080を使用
    environment:
      - DB_HOST=postgres
      - DB_PORT=5432
      - DB_NAME=${DB_NAME:-rule_mcp_db}
      - DB_USER=${DB_USER:-rule_mcp_user}
      - DB_PASSWORD=${DB_PASSWORD:-rule_mcp_password}
      - PORT=8080
      - ENVIRONMENT=production
      - JWT_SECRET=${JWT_SECRET:-change-this-in-production}
      - LOG_LEVEL=${LOG_LEVEL:-info}
      - ALLOWED_ORIGINS=${ALLOWED_ORIGINS:-http://localhost:3000,http://localhost:13000,http://localhost:18080,http://localhost:18000}
    depends_on:
      postgres:
        condition: service_healthy
    volumes:
      - ./rules.json:/root/rules.json:ro
      - ./logs:/var/log/rulemcp:rw
    restart: unless-stopped
    networks:
      - rule-mcp-network-prod
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/api/v1/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # React Frontend for rule management (本番用)
  rule-manager-ui:
    build:
      context: ./frontend
      dockerfile: Dockerfile.prod
      args:
        REACT_APP_API_URL: http://localhost:18000/api/v1
    container_name: rule-manager-ui-prod
    ports:
      - "13000:80"  # 標準80を避けて13000を使用
    depends_on:
      - rule-mcp-server
    restart: unless-stopped
    networks:
      - rule-mcp-network-prod

  # Prometheus for metrics collection
  prometheus:
    image: prom/prometheus:latest
    container_name: prometheus-prod
    ports:
      - "19090:9090"  # 本番用ポート
    volumes:
      - ./prometheus/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - ./prometheus/rules:/etc/prometheus/rules:ro
      - prometheus_data_prod:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=720h'
      - '--web.enable-lifecycle'
    restart: unless-stopped
    networks:
      - rule-mcp-network-prod

  # Grafana for visualization
  grafana:
    image: grafana/grafana:latest
    container_name: grafana-prod
    ports:
      - "14000:3000"  # 本番用ポート
    environment:
      - GF_SECURITY_ADMIN_USER=${GRAFANA_ADMIN_USER:-admin}
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_ADMIN_PASSWORD:-admin123}
      - GF_USERS_ALLOW_SIGN_UP=false
      - GF_SECURITY_SECRET_KEY=${GRAFANA_SECRET_KEY:-changeme}
    volumes:
      - grafana_data_prod:/var/lib/grafana
      - ./grafana/provisioning:/etc/grafana/provisioning:ro
      - ./grafana/dashboards:/var/lib/grafana/dashboards:ro
    depends_on:
      - prometheus
    restart: unless-stopped
    networks:
      - rule-mcp-network-prod

  # Node Exporter for system metrics
  node-exporter:
    image: prom/node-exporter:latest
    container_name: node-exporter-prod
    ports:
      - "19100:9100"  # 本番用ポート
    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /:/rootfs:ro
    command:
      - '--path.procfs=/host/proc'
      - '--path.rootfs=/rootfs'
      - '--path.sysfs=/host/sys'
      - '--collector.filesystem.mount-points-exclude=^/(sys|proc|dev|host|etc)($$|/)'
    restart: unless-stopped
    networks:
      - rule-mcp-network-prod

  # PostgreSQL Exporter for database metrics
  postgres-exporter:
    image: prometheuscommunity/postgres-exporter:latest
    container_name: postgres-exporter-prod
    ports:
      - "19187:9187"  # 本番用ポート
    environment:
      - DATA_SOURCE_NAME=postgresql://${DB_USER:-rule_mcp_user}:${DB_PASSWORD:-rule_mcp_password}@postgres:5432/${DB_NAME:-rule_mcp_db}?sslmode=disable
    depends_on:
      - postgres
    restart: unless-stopped
    networks:
      - rule-mcp-network-prod

  # Nginx reverse proxy
  nginx:
    image: nginx:alpine
    container_name: rule-mcp-nginx-prod
    ports:
      - "18000:80"  # 本番用ポート
      - "18443:443"  # 本番用ポート
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./logs/nginx:/var/log/nginx:rw
    depends_on:
      - rule-mcp-server
      - rule-manager-ui
    restart: unless-stopped
    networks:
      - rule-mcp-network-prod

  # Nginx Exporter for web server metrics
  nginx-exporter:
    image: nginx/nginx-prometheus-exporter:latest
    container_name: nginx-exporter-prod
    ports:
      - "19113:9113"  # 本番用ポート
    command:
      - '-nginx.scrape-uri=http://nginx:80/nginx_status'
    depends_on:
      - nginx
    restart: unless-stopped
    networks:
      - rule-mcp-network-prod


volumes:
  postgres_data_prod:
  prometheus_data_prod:
  grafana_data_prod:

networks:
  rule-mcp-network-prod:
    driver: bridge
