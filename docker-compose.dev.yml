# =============================================================================
# Rule MCP Server - Development Docker Compose
# =============================================================================
# 
# 開発環境用のDocker Compose設定
# 使用方法:
# 1. env.template をコピーして .env にリネーム
# 2. .env ファイルで開発環境の設定を行う
# 3. docker compose -f docker-compose.dev.yml up -d で起動
#
# 開発環境ではデバッグ機能が有効になり、ポートも開発用に設定されます
#
# =============================================================================

services:
  postgres:
    image: postgres:15-alpine
    container_name: rule-mcp-postgres-dev
    environment:
      POSTGRES_DB: rule_mcp_db
      POSTGRES_USER: rule_mcp_user
      POSTGRES_PASSWORD: rule_mcp_password
    ports:
      - "15432:5432"  # 開発用ポート
    volumes:
      - postgres_data_dev:/var/lib/postgresql/data
      - ./init.sql:/docker-entrypoint-initdb.d/init.sql
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U rule_mcp_user -d rule_mcp_db"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped
    networks:
      - rule-mcp-network-dev

  rule-mcp-server:
    build: .
    container_name: rule-mcp-server-dev
    ports:
      - "18080:8080"  # 開発用ポート
    env_file:
      - .env.development  # 開発環境用の環境変数ファイル
    environment:
      - DB_HOST=postgres
      - DB_PORT=5432
      - DB_NAME=rule_mcp_db
      - DB_USER=rule_mcp_user
      - DB_PASSWORD=rule_mcp_password
      - PORT=8080
      - ENV=development
      - DEBUG=true
      - LOG_LEVEL=debug
      # ALLOWED_ORIGINS は .env.development ファイルから読み込み
    depends_on:
      postgres:
        condition: service_healthy
    volumes:
      - ./rules.json:/root/rules.json:ro
      - ./:/app:ro  # 開発時のホットリロード用（必要に応じて）
    restart: unless-stopped
    networks:
      - rule-mcp-network-dev

  # React Frontend for rule management (開発環境)
  rule-manager-ui:
    build:
      context: ./frontend
      dockerfile: Dockerfile
      args:
        - REACT_APP_API_URL=http://localhost:18000/api/v1
        # - REACT_APP_API_URL=http://192.168.1.100:18000/api/v1 # LAN内アクセス用
    container_name: rule-manager-ui-dev
    ports:
      - "13000:80"  # 開発用ポート
    environment:
      - NODE_ENV=development
    depends_on:
      - rule-mcp-server
    restart: unless-stopped
    networks:
      - rule-mcp-network-dev

  # Prometheus for metrics collection
  prometheus:
    image: prom/prometheus:latest
    container_name: prometheus-dev
    ports:
      - "19090:9090"  # 開発用ポート
    volumes:
      - ./prometheus/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - ./prometheus/rules:/etc/prometheus/rules:ro
      - prometheus_data_dev:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    restart: unless-stopped
    networks:
      - rule-mcp-network-dev

  # Grafana for visualization
  grafana:
    image: grafana/grafana:latest
    container_name: grafana-dev
    ports:
      - "14000:3000"  # 開発用ポート
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=admin123
      - GF_USERS_ALLOW_SIGN_UP=false
    volumes:
      - grafana_data_dev:/var/lib/grafana
      - ./grafana/provisioning:/etc/grafana/provisioning:ro
      - ./grafana/dashboards:/var/lib/grafana/dashboards:ro
    depends_on:
      - prometheus
    restart: unless-stopped
    networks:
      - rule-mcp-network-dev

  # Node Exporter for system metrics
  node-exporter:
    image: prom/node-exporter:latest
    container_name: node-exporter-dev
    ports:
      - "19100:9100"  # 開発用ポート
    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /:/rootfs:ro
    command:
      - '--path.procfs=/host/proc'
      - '--path.rootfs=/rootfs'
      - '--path.sysfs=/host/sys'
      - '--collector.filesystem.mount-points-exclude=^/(sys|proc|dev|host|etc)($$|/)'
    restart: unless-stopped
    networks:
      - rule-mcp-network-dev

  # PostgreSQL Exporter for database metrics
  postgres-exporter:
    image: prometheuscommunity/postgres-exporter:latest
    container_name: postgres-exporter-dev
    ports:
      - "19187:9187"  # 開発用ポート
    environment:
      - DATA_SOURCE_NAME=postgresql://rule_mcp_user:rule_mcp_password@postgres:5432/rule_mcp_db?sslmode=disable
    depends_on:
      - postgres
    restart: unless-stopped
    networks:
      - rule-mcp-network-dev

  # Nginx reverse proxy
  nginx:
    image: nginx:alpine
    container_name: rule-mcp-nginx-dev
    ports:
      - "18000:80"  # 開発用ポート
      - "18443:443"  # 開発用ポート
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./logs/nginx:/var/log/nginx:rw
    depends_on:
      - rule-mcp-server
      - rule-manager-ui
    restart: unless-stopped
    networks:
      - rule-mcp-network-dev

  # Nginx Exporter for web server metrics
  nginx-exporter:
    image: nginx/nginx-prometheus-exporter:latest
    container_name: nginx-exporter-dev
    ports:
      - "19113:9113"  # 開発用ポート
    command:
      - '-nginx.scrape-uri=http://nginx:80/nginx_status'
    depends_on:
      - nginx
    restart: unless-stopped
    networks:
      - rule-mcp-network-dev

volumes:
  postgres_data_dev:
  prometheus_data_dev:
  grafana_data_dev:

networks:
  rule-mcp-network-dev:
    driver: bridge
